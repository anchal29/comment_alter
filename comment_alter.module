<?php
/**
* @file
* Allows to alter entities from comment form.
*/

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\field\Entity\FieldConfig;


/**
 * Implements hook_form_FORM_ID_alter().
 */
function comment_alter_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state) {
  $field = $form_state->getFormObject()->getEntity();

  $form['third_party_settings']['comment_alter']['comment_alter_enabled'] = [
    '#type' => 'checkbox',
    '#title' => t('User may alter this field from comment.'),
    '#weight' => 0,
    '#default_value' => $field->getThirdPartySetting('comment_alter', 'comment_alter_enabled', FALSE),
    '#description' => t('This allows user to alter this field from comment attached to the parent entity'),
  ];
  $form['third_party_settings']['comment_alter']['comment_alter_hide'] = [
    '#type' => 'checkbox',
    '#title' => t('Hide alterations of this field from diffs.'),
    '#weight' => 1,
    '#default_value' => $field->getThirdPartySetting('comment_alter', 'comment_alter_hide', FALSE),
    '#states' => [
      'invisible' => [':input[name="third_party_settings[comment_alter][comment_alter_enabled]"]' => ['checked' => FALSE]],
    ],
  ];
  $form['third_party_settings']['#weight'] = $form['required']['#weight'] + 0.7;

  // @TODO
  // Move these three options to parent entity edit form.
  $entity_type = explode('.', $field->getOriginalId());
  if ($entity_type[0] == 'comment') {
    $form['third_party_settings']['comment_alter']['comment_alter_default'] = [
      '#type' => 'checkbox',
      '#title' => t('Use the latest revision as the default values for comment alterable fields (if any)'),
      '#weight' => 2,
      '#default_value' => $field->getThirdPartySetting('comment_alter', 'comment_alter_default', FALSE),
      '#description' => t('Loads the field values from the latest revision of the node (instead of the current revision) when the comment form is displayed.'),
    ];
    $form['third_party_settings']['comment_alter']['comment_alter_diff_link'] = [
      '#type' => 'checkbox',
      '#title' => t('Add a link to the usual diff of the two revisions to the links area of the comment'),
      '#weight' => 3,
      '#default_value' => $field->getThirdPartySetting('comment_alter', 'comment_alter_diff_link', FALSE),
    ];
    $form['third_party_settings']['comment_alter']['comment_alter_reply'] = [
      '#type' => 'checkbox',
      '#title' => t('Allow altering fields when submitting reply comments'),
      '#weight' => 4,
      '#default_value' => $field->getThirdPartySetting('comment_alter', 'comment_alter_root_only', FALSE),
    ];
  }

  // Clearing cache to ensure that cache is removed if we select comment alter
  // option for a field.
  \Drupal::cache()->delete('comment_alter_fields:' . $entity_type[0] . ':' . $entity_type[1]);

}

/**
 * Returns the comment alterable fields for an entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Entity object for the parent entity.
 *
 * @return array
 *   An array of comment alterable fields on parent entity.
 */
function comment_alter_get_alterable_fields($entity_type, $bundle) {
  $cid = 'comment_alter_fields:' . $entity_type . ':' . $bundle;
  $comment_alter_fields = &drupal_static(__FUNCTION__);
  if (!isset($comment_alter_fields[$entity_type][$bundle])) {
    if ($cache = \Drupal::cache()->get($cid)) {
      $comment_alter_fields[$entity_type][$bundle][] = $cache->data;
    }
    else {
      $field_definitions = \Drupal::entityManager()->getFieldDefinitions($entity_type, $bundle);
      foreach ($field_definitions as $field_name => $field_item) {
        // Check if we are dealing with an actual field. The
        // getThirdPartySetting method is available only for an actual field.
        if (is_a($field_item, 'Drupal\field\Entity\FieldConfig') && $field_item->getThirdPartySetting('comment_alter', 'comment_alter_enabled', FALSE)) {
          $comment_alter_fields[$entity_type][$bundle][] = $field_name;
        }
      }
      \Drupal::cache()->set($cid, $comment_alter_fields[$entity_type][$bundle]);
    }
  }

  return $comment_alter_fields[$entity_type][$bundle];
}


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function comment_alter_form_comment_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $comment_entity = $form_state->getFormObject()->getEntity();
  if (!$comment_entity->isNew()) {
      return;
  }
  elseif ($comment_entity->hasParentComment()) {
    // @todo Check if user has selected this option or not.
    return;
  }
  else {
    $parent_entity = $comment_entity->getCommentedEntity();
  }
}

/**
 * Implements hook_form_alter().
 */
function comment_alter_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $entity = $form_state->getFormObject()->getEntity();
  // @todo Find suitable form alter.

}

/**
 * Implements hook_entity_extra_field_info().
 */
function comment_alter_entity_extra_field_info() {
  $extra = [];
  foreach (\Drupal::entityManager()->getDefinitions() as $entity_type => $entity) {
    foreach (entity_get_bundles($entity_type) as $bundle => $bundle_info) {
      $weight = 0;
      if ($entity instanceof Drupal\Core\Entity\ContentEntityTypeInterface) {
        // Store the comment bundle to actually which these comment fields
        // belong to (i.e. the comment type), which can be used later on while
        // adding pseudo field to comment forms.
        // But here we will see that all these comment alterable fields will be
        // added to a central comment bundle/comment type which is used at
        // various parent entities. So, this is a problem as we want comment
        // alterables because of the parent entity only not ones from other
        // entities which has same comment type.
        $field_definitions = \Drupal::entityManager()->getFieldDefinitions($entity_type, $bundle);
        foreach ($field_definitions as $field_definition) {
          // @todo Get bundle or comment type for the comment field attached to
          // this entity.
        }
        $comment_alter_fields = comment_alter_get_alterable_fields($entity_type, $bundle);
        if (!empty($comment_alter_fields)) {
          foreach ($comment_alter_fields[0] as $key => $field_name) {
            $field = FieldConfig::loadByName($entity_type, $bundle, $field_name);
            // @todo Get proper bundle to which this comment field belong.
            $comment_bundle = 'comment';   //Assuming for now(As it is the default one)
            $extra['comment'][$comment_bundle]['form'][$field_name] = [
              'label' => $field->getLabel(),
              'description' => $field->getDescription(),
              'weight' => $weight,
            ];
            $weight++;
          }
          $extra['comment'][$comment_bundle]['display']['comment_alter'] = [
          'label' => t('Comment changes'),
          'description' => t('Changes made to the parent node\'s fields in this comment.'),
          'weight' => -1,
          ];
        }
      }
    }
  }

  return $extra;
}
