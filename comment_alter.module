<?php
/**
* @file
* Allows to alter entities from comment form.
*/

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;


/**
 * Implements hook_form_FORM_ID_alter().
 */
function comment_alter_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state) {
  $field = $form_state->getFormObject()->getEntity();

  $form['third_party_settings']['comment_alter']['comment_alter_enabled'] = [
    '#type' => 'checkbox',
    '#title' => t('User may alter this field from comment.'),
    '#weight' => 0,
    '#default_value' => $field->getThirdPartySetting('comment_alter', 'comment_alter_enabled', FALSE),
    '#description' => t('This allows user to alter this field from comment attached to the parent entity'),
  ];
  $form['third_party_settings']['comment_alter']['comment_alter_hide'] = [
    '#type' => 'checkbox',
    '#title' => t('Hide alterations of this field from diffs.'),
    '#weight' => 1,
    '#default_value' => $field->getThirdPartySetting('comment_alter', 'comment_alter_hide', FALSE),
    '#states' => [
      'invisible' => [':input[name="third_party_settings[comment_alter][comment_alter_enabled]"]' => ['checked' => FALSE]],
    ],
  ];
  $form['third_party_settings']['#weight'] = $form['required']['#weight'] + 0.7;

  // @TODO
  // Move these three options to parent entity edit form.
  $entity_type = explode('.', $field->getOriginalId());
  if ($entity_type[0] == 'comment') {
    $form['third_party_settings']['comment_alter']['comment_alter_default'] = [
      '#type' => 'checkbox',
      '#title' => t('Use the latest revision as the default values for comment alterable fields (if any)'),
      '#weight' => 2,
      '#default_value' => $field->getThirdPartySetting('comment_alter', 'comment_alter_default', FALSE),
      '#description' => t('Loads the field values from the latest revision of the node (instead of the current revision) when the comment form is displayed.'),
    ];
    $form['third_party_settings']['comment_alter']['comment_alter_diff_link'] = [
      '#type' => 'checkbox',
      '#title' => t('Add a link to the usual diff of the two revisions to the links area of the comment'),
      '#weight' => 3,
      '#default_value' => $field->getThirdPartySetting('comment_alter', 'comment_alter_diff_link', FALSE),
    ];
    $form['third_party_settings']['comment_alter']['comment_alter_reply'] = [
      '#type' => 'checkbox',
      '#title' => t('Allow altering fields when submitting reply comments'),
      '#weight' => 4,
      '#default_value' => $field->getThirdPartySetting('comment_alter', 'comment_alter_root_only', FALSE),
    ];
  }

  // Clearing cache to ensure that cache is removed if we select comment alter
  // option for a field.
  $cid = "comment_alter_fields:".$entity_type[0].":".$entity_type[1];
  \Drupal::cache()->delete($cid);

}

/**
 * Returns the comment alterable fields for an entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Entity object for the parent entity.
 *
 * @return array
 *   An array of comment alterable fields on parent entity.
 */
function comment_alter_get_alterable_fields(EntityInterface $entity) {
  $entity_type = $entity->getEntityTypeId();
  $bundle = $entity->bundle();
  $cid = "comment_alter_fields:".$entity_type.":".$bundle;
  $comment_alter_fields = &drupal_static(__FUNCTION__);
  if (!isset($comment_alter_fields[$entity_type][$bundle])) {
    if ($cache = \Drupal::cache()->get($cid)) {
      $comment_alter_fields[$entity_type][$bundle][] = $cache->data;
    }
    else {
      $field_definitions = \Drupal::entityManager()->getFieldDefinitions($entity_type, $bundle);
      foreach ($field_definitions as $field_name => $field_item) {
        if (is_a($field_item, 'Drupal\field\Entity\FieldConfig') && $field_item->getThirdPartySetting('comment_alter', 'comment_alter_enabled', FALSE)) {
          $comment_alter_fields[$entity_type][$bundle][] = $field_name;
        }
      }
      \Drupal::cache()->set($cid, $comment_alter_fields[$entity_type][$bundle]);
    }
  }

  return $comment_alter_fields[$entity_type][$bundle];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function comment_alter_form_comment_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $parent_entity = $form_state->getFormObject()->getEntity()->getCommentedEntity();
  dpm(comment_alter_get_alterable_fields($parent_entity));

}
